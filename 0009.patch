From be96736095dbf2afbcfc3ebdfc9c2db5d783b5e5 Mon Sep 17 00:00:00 2001
From: Simone Basso <bassosimone@gmail.com>
Date: Thu, 13 Sep 2012 22:41:52 +0200
Subject: [PATCH 10/11] Make logger more robust and simpler

Make it more robust by wrapping log functions with try..catch
clauses.  This fixes the problem with stderr being invalid when
running headless on Windows, as well as other crashes.

Make it simpler by removing the streaming logger, which is
added complexity.  Just import LOG in the only file that needs
it, thereby removing an XXX.

While there, make some log messages more meaningful and print
the whole stacktrace on error.  Otherwise, when you debug, you
have a really hard time to figure out the error.
---
 neubot/api/server.py  |  2 +-
 neubot/http/server.py | 10 +++++-----
 neubot/log.py         | 51 ++++++++++++++++++++++++++-------------------------
 3 files changed, 32 insertions(+), 31 deletions(-)

diff --git a/neubot/api/server.py b/neubot/api/server.py
index 660ace0..336cba6 100644
--- a/neubot/api/server.py
+++ b/neubot/api/server.py
@@ -95,7 +95,7 @@ class ServerAPI(ServerHTTP):
             error = sys.exc_info()[1]
             reason = re.sub(r"[\0-\31]", "", str(error))
             reason = re.sub(r"[\x7f-\xff]", "", reason)
-            logging.info('Exception', exc_info=1)
+            logging.info('Internal error while serving response', exc_info=1)
             response = Message()
             response.compose(code="500", reason=reason,
                     body=reason)
diff --git a/neubot/http/server.py b/neubot/http/server.py
index 81c40df..7e02252 100644
--- a/neubot/http/server.py
+++ b/neubot/http/server.py
@@ -49,8 +49,6 @@ from neubot import system
 from neubot import utils
 from neubot import utils_net
 
-ACCESS_LOGGER = logging.getLogger('access')
-
 #
 # 3-letter abbreviation of month names.
 # We use our abbreviation because we don't want the
@@ -138,8 +136,10 @@ class ServerStream(StreamHTTP):
             if nbytes == "0":
                 nbytes = "-"
 
-        ACCESS_LOGGER.info("%s - - [%s] \"%s\" %s %s", address, timestring,
-                requestline, statuscode, nbytes)
+        LOG.log("ACCESS",
+                "%s - - [%s] \"%s\" %s %s",
+                (address, timestring, requestline, statuscode, nbytes),
+                None)
 
 class ServerHTTP(StreamHandler):
 
@@ -271,7 +271,7 @@ class ServerHTTP(StreamHandler):
 
     def _on_internal_error(self, stream, request):
         ''' Generate 500 Internal Server Error page '''
-        logging.error('Exception', exc_info=1)
+        logging.error('Internal error while serving response', exc_info=1)
         response = Message()
         response.compose(code="500", reason="Internal Server Error",
                          body="500 Internal Server Error", keepalive=0)
diff --git a/neubot/log.py b/neubot/log.py
index 39e1a81..f622aa9 100644
--- a/neubot/log.py
+++ b/neubot/log.py
@@ -126,6 +126,15 @@ class StreamingLogger(object):
 
     def log(self, severity, message, args, exc_info):
         ''' Really log a message '''
+        try:
+            self._log(severity, message, args, exc_info)
+        except (SystemExit, KeyboardInterrupt):
+            raise
+        except:
+            pass
+
+    def _log(self, severity, message, args, exc_info):
+        ''' Really log a message '''
 
         # No point in logging empty lines
         if not message:
@@ -137,7 +146,10 @@ class StreamingLogger(object):
             if args:
                 message = message % args
             if exc_info:
-                message = "%s: %s\n" % (message, str(exc_info[1]))
+                exc_list = traceback.format_exception(exc_info[0],
+                                                      exc_info[1],
+                                                      exc_info[2])
+                message = "%s\n%s\n" % (message, ''.join(exc_list))
             message = message.rstrip()
 
             try:
@@ -226,6 +238,15 @@ class Logger(object):
 
     def log(self, severity, message, args, exc_info):
         ''' Really log a message '''
+        try:
+            self._log(severity, message, args, exc_info)
+        except (KeyboardInterrupt, SystemExit):
+            raise
+        except:
+            pass
+
+    def _log(self, severity, message, args, exc_info):
+        ''' Really log a message '''
 
         # No point in logging empty lines
         if not message:
@@ -244,7 +265,10 @@ class Logger(object):
         if args:
             message = message % args
         if exc_info:
-            message = "%s: %s\n" % (message, str(exc_info[1]))
+            exc_list = traceback.format_exception(exc_info[0],
+                                                  exc_info[1],
+                                                  exc_info[2])
+            message = "%s\n%s\n" % (message, ''.join(exc_list))
         message = message.rstrip()
 
         # Write log into the database
@@ -317,16 +341,6 @@ class LogWrapper(logging.Handler):
         exc_info = record.exc_info
         LOG.log(level, msg, args, exc_info)
 
-class AccessLogWrapper(logging.Handler):
-
-    """Glue between stdlib logging and access logger"""
-
-    def emit(self, record):
-        msg = record.msg
-        args = record.args
-        exc_info = record.exc_info
-        LOG.log('ACCESS', msg, args, exc_info)
-
 STREAMING_LOG = StreamingLogger()
 
 class StreamingLogWrapper(logging.Handler):
@@ -347,19 +361,6 @@ ROOT_LOGGER.addHandler(LogWrapper())
 ROOT_LOGGER.addHandler(StreamingLogWrapper())
 ROOT_LOGGER.setLevel(logging.DEBUG)
 
-#
-# Create 'access' logger
-# XXX Probably it should be more tidy to make sure this
-# code always runs before http_server.py, to avoid all
-# possible race conditions.
-#
-ACCESS_LOGGER = logging.getLogger('access')
-ACCESS_LOGGER.setLevel(logging.INFO)
-ACCESS_LOGGER.addHandler(AccessLogWrapper())
-
-# Avoid passing access-log messages to the ROOT logger
-ACCESS_LOGGER.propagate = False
-
 def set_verbose():
     ''' Make logger verbose '''
     CONFIG['verbose'] = 1
-- 
Simone Basso

