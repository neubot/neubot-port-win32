From 166e92f13208834c6783347b70fe2bbb6571a832 Mon Sep 17 00:00:00 2001
From: Simone Basso <bassosimone@gmail.com>
Date: Thu, 13 Sep 2012 21:15:45 +0200
Subject: [PATCH 09/11] net/poller.py: more explanatory error messages

---
 neubot/net/poller.py | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/neubot/net/poller.py b/neubot/net/poller.py
index 029eb55..1822441 100644
--- a/neubot/net/poller.py
+++ b/neubot/net/poller.py
@@ -22,7 +22,6 @@
 
 ''' Dispatch read, write, periodic and other events '''
 
-import asyncore
 import logging
 import errno
 import select
@@ -130,7 +129,7 @@ class Poller(sched.scheduler):
         except (KeyboardInterrupt, SystemExit, StopPoller):
             raise
         except:
-            logging.error(str(asyncore.compact_traceback()))
+            logging.error('Exception running task "%s"', task, exc_info=1)
 
     def set_readable(self, stream):
         ''' Monitor for readability '''
@@ -161,7 +160,7 @@ class Poller(sched.scheduler):
         except (KeyboardInterrupt, SystemExit, StopPoller):
             raise
         except:
-            logging.error(str(asyncore.compact_traceback()))
+            logging.error('Exception closing stream "%s"', stream, exc_info=1)
 
     #
     # We are very careful when accessing readset and writeset because
@@ -184,7 +183,8 @@ class Poller(sched.scheduler):
             except (KeyboardInterrupt, SystemExit, StopPoller):
                 raise
             except:
-                logging.error(str(asyncore.compact_traceback()))
+                logging.error('Exception while reading stream "%s"',
+                  stream, exc_info=1)
                 self.close(stream)
 
     def _call_handle_write(self, fileno):
@@ -196,7 +196,8 @@ class Poller(sched.scheduler):
             except (KeyboardInterrupt, SystemExit, StopPoller):
                 raise
             except:
-                logging.error(str(asyncore.compact_traceback()))
+                logging.error('Exception while writing stream "%s"',
+                  stream, exc_info=1)
                 self.close(stream)
 
     def break_loop(self):
@@ -215,7 +216,7 @@ class Poller(sched.scheduler):
             except StopPoller:
                 break
             except:
-                logging.error(str(asyncore.compact_traceback()))
+                logging.error('Exception in poller loop', exc_info=1)
 
     def _poll(self, timeout):
         ''' Poll for readability and writability '''
@@ -235,7 +236,7 @@ class Poller(sched.scheduler):
             except select.error:
                 code = sys.exc_info()[1][0]
                 if code != errno.EINTR:
-                    logging.error(str(asyncore.compact_traceback()))
+                    logging.error('select(2) failed', exc_info=1)
                     raise
 
                 else:
-- 
Simone Basso

